/* Lexical Part */

comma       : ',' ;
geq         : '>' '=' ;
gt          : '>' ;
leq         : '<' '=' ;
larrow      : '<' '-' ;
neq         : '<' '>' ;
lt          : '<' ;
rarrow      : '-' '>' ;
eq          : '=' ;
plus        : '+' ;
minus       : '-' ;
lbrace      : '{' ;
rbrace      : '}' ;
lbrack      : '[' ;
rbrack      : ']' ;
lparen      : '(' ;
rparen      : ')' ;
colon       : ':' ;
semicolon   : ';' ;
keyhash     : 'k' 'e' 'y' '_' 'h' 'a' 's' 'h' ;
operation   : 'o' 'p' 'e' 'r' 'a' 't' 'i' 'o' 'n' ;
list        : 'l' 'i' 's' 't' ;
percentage  : '%' ;
let         : 'l' 'e' 't' ;
in          : 'i' 'n' ;
if          : 'i' 'f' ;
then        : 't' 'h' 'e' 'n' ;
else        : 'e' 'l' 's' 'e' ;
type        : 't' 'y' 'p' 'e' ;
tez         : 't' 'e' 'z' ;

/* TODO: make sure hashes without capital letters can be distinguished from ids */
_b58char    :  '1'-'9' | 'A'-'H' | 'J'-'N' | 'P'-'Z' | 'a'-'k' | 'm'-'z' ;
hash        : 'k' 'o' 'i' 'n' _b58char { _b58char } ;

/* id's are all minor case in liquidity, starting with a letter */
_idchars    : 'a'-'z' | 'A'-'Z' | '0'-'9' | '_'  ;
lident      : ( 'a'-'z' | '_' ) { _idchars } ;
uident      : ( 'A'-'Z' ) { _idchars } ;

/* TODO: escape chars */
string      : '"' {.} '"' ;

_digit      : '0'-'9' ;
_amount     : _digit { _digit } ;
tez_lit     : _amount 't' 'z' ;

/* TODO: test float detection */
int         : _digit { _digit } ;
float       : _digit { _digit } '.' { _digit } ;

/* This must go below float detection, for obvious reasons */
dot         : '.' ;

/* Comments are treated as whitespace. As are version identifier TODO */
_comment    : '(' '*' {.} '*' ')' ;
_version    : '[' '%' '%' 'v' 'e' 'r' 's' 'i' 'o' 'n' ' ' {.} ']' ;
!whitespace : ' ' | '\t' | '\n' | '\r' | _comment | _version ;




/* Syntax Part */

<< import "github.com/nfk93/blockchain/interpreter/ast" >>

Toplevel        : Structure             << ast.NewExpression() >> ;

Structure       : lident                << ast.NewExpression() >> ;























