/* Lexical Part */

comma       : ',' ;
geq         : '>' '=' ;
gt          : '>' ;
leq         : '<' '=' ;
larrow      : '<' '-' ;
neq         : '<' '>' ;
lt          : '<' ;
rarrow      : '-' '>' ;
eq          : '=' ;
plus        : '+' ;
minus       : '-' ;
slash       : '/' ;
lbrace      : '{' ;
rbrace      : '}' ;
lbrack      : '[' ;
rbrack      : ']' ;
lparen      : '(' ;
rparen      : ')' ;
colon       : ':' ;
semicolon   : ';' ;
ast         : '*' ;
key         : 'k' 'e' 'y' ;
operation   : 'o' 'p' 'e' 'r' 'a' 't' 'i' 'o' 'n' ;
list        : 'l' 'i' 's' 't' ;
bool        : 'b' 'o' 'o' 'l' ;
int         : 'i' 'n' 't' ;
string      : 's' 't' 'r' 'i' 'n' 'g' ;
false       : 'f' 'a' 'l' 's' 'e' ;
true        : 't' 'r' 'u' 'e' ;
letinit     : 'l' 'e' 't' '%' 'i' 'n' 'i' 't' ;
letentry    : 'l' 'e' 't' '%' 'e' 'n' 't' 'r' 'y' ;
let         : 'l' 'e' 't' ;  // has to go after the other lets
in          : 'i' 'n' ;
if          : 'i' 'f' ;
then        : 't' 'h' 'e' 'n' ;
else        : 'e' 'l' 's' 'e' ;
type        : 't' 'y' 'p' 'e' ;
koin        : 'k' 'o' 'i' 'n' ;

/* TODO: make sure hashes without capital letters can be distinguished from ids */
_b58char    :  '1'-'9' | 'A'-'H' | 'J'-'N' | 'P'-'Z' | 'a'-'k' | 'm'-'z' ;
key_lit     : 'k' 'n' '1' _b58char { _b58char } ;

/* id's are all minor case in liquidity, starting with a letter */
_idchars    : 'a'-'z' | 'A'-'Z' | '0'-'9' | '_'  ;
lident      : ( 'a'-'z' | '_' ) { _idchars } ;
uident      : ( 'A'-'Z' ) { _idchars } ;

/* TODO: escape chars */
string_lit  : '"' {.} '"' ;

_digit      : '0'-'9' ;
_amount     : _digit { _digit } ;
koin_lit     : _amount 'k' 'n' ;
int_lit     : {'-'} _digit { _digit } ;
float_lit   : _digit { _digit } '.' { _digit } ;

/* This must go below float detection, for obvious reasons */
dot         : '.' ;

/* Comments are treated as whitespace. As are version identifier TODO */
_comment    : '(' '*' {.} '*' ')' ;
_version    : '[' '%' '%' 'v' 'e' 'r' 's' 'i' 'o' 'n' ' ' {.} ']' ;
!whitespace : ' ' | '\t' | '\n' | '\r' | _comment | _version ;




/* Syntax Part */

<< import "github.com/nfk93/blockchain/interpreter/ast"
   import "github.com/nfk93/blockchain/interpreter/util" >>

Toplevel    : Structure                                         << ast.NewRoot($0) >>
            | Structure Toplevel                                << ast.AppendRoots($0, $1) >> ;


Structure   : ModStruct                                         << >>
            | letinit lident eq Exp                             << ast.NewInitExp(util.ParseId($1), $3) >>
            | letentry lident Pattern Pattern eq Exp            << ast.NewEntryExpression(util.ParseId($1), $2, $3, $5) // >> ;

ModStruct   : type lident eq Type                               << ast.NewTypeDecl(util.ParseId($1), $3) // >>
            | type lident eq lbrace Struct rbrace               << ast.NewTypeDecl(util.ParseId($1), $4) // >> ;

Struct      : lident colon Type semicolon Struct                << ast.AddFieldToStruct(util.ParseId($0), $2, $4), nil // >>
            | lident colon Type semicolon                       << ast.NewStructType(util.ParseId($0), $2), nil // >> ;

ExpSeq      : Exp                                               << $0, nil >>
            | ExpSeq semicolon Exp                              << ast.NewExpSeq($0, $2) // seqexp >> ;

Exp         : lident                                            << ast.NewVarExp(util.ParseId($0)) // idexp >>
            | uident dot lident                                 << ast.NewModuleLookupExp(util.ParseId($0), util.ParseId($2)) // external lookup exp >>
            | lparen ExpSeq rparen                              << $1, nil // parenthesis >>
            | Lookup lident larrow Exp                          << ast.NewUpdateStructExp($0, util.ParseId($1), $3) // lookupexp >>
            | Lookup lident                                     << ast.NewLookupExp($0, util.ParseId($1)) // lookupexp >>
            | if Exp then Exp else Exp                          << ast.NewIfThenElseExp($1, $3, $5) // ifthenelse exp >>
            | if Exp then Exp                                   << ast.NewIfThenExp($1, $3) // ifthen exp >>
            | Exp colon colon Exp                               << ast.NewListConcat($0, $3) // >>
            | let Pattern eq Exp in Exp                         << ast.NewLetExp($1, $3, $5) // letexp >>
            | lparen Tuple rparen                               << $1, nil // tupleexp >>
            | lparen Exp colon Type rparen                      << ast.NewAnnoExp($1, $3) // annotatedExp >>
            | Exp Binop Exp                                     << ast.NewBinOpExp($0, $1, $2) // BinopExp >>
            | Constant                                          << >>;

Binop       : plus                                              << ast.PLUS, nil >>
            | minus                                             << ast.MINUS, nil>>
            | ast                                               << ast.TIMES, nil>>
            | slash                                             << ast.DIVIDE, nil>>
            | eq eq                                             << ast.EQ, nil >>
            | neq                                               << ast.NEQ, nil >>
            | geq                                               << ast.GEQ, nil >>
            | leq                                               << ast.LEQ, nil >>
            | lt                                                << ast.LT, nil >>
            | gt                                                << ast.GT, nil >> ;

Tuple       : Exp comma Exp                                     << ast.NewTupleExp($0, $2) // tuple >>
            | Exp comma Tuple                                   << ast.AddTupleEntry($0, $2) // tuple of tuple >> ;

Lookup      : Lookup lident dot                                 << ast.AddPathElement($0, util.ParseId($1)), nil // intermediate for lookup calls  >>
            | lident dot                                        << ast.LookupPathRoot(util.ParseId($0)), nil // see above >> ;

Pattern     : lparen rparen                                     << ast.NewEmptyPattern() >>
            | lparen Paramlist rparen                           << ast.NewPattern($1) >>
            | Param                                             << ast.NewPattern($0) >> ;

Param       : lident                                            << ast.NewParam(util.ParseId($0)) // param >>
            | lparen lident colon Type rparen                   << ast.NewAnnoParam(util.ParseId($1), $3) // typeanno param >> ;
            
Paramlist   : Param comma Paramlist                             << ast.AppendParams($0, $2)>>
            | Param                                             << ast.NewParamList($0)>> ;

Type        : bool                                              << ast.NewBoolType(), nil >>
            | int                                               << ast.NewIntType(), nil >>
            | koin                                              << ast.NewKoinType(), nil >>
            | string                                            << ast.NewStringType(), nil >>
            | key                                               << ast.NewKeyType(), nil >>
            | operation                                         << ast.NewOperationType(), nil >>
            | lparen Type rparen                                << $1, nil >>
            | Type list                                         << ast.NewListType($0), nil >>
            | Type ast Type                                     << ast.NewTupleType($0, $2), nil >>
            | lident                                            << ast.NewDeclaredType(util.ParseString($0)), nil >> ;

Constant    : key_lit                                           << ast.NewKeyLit(util.ParseKey($0)) >>
            | true                                              << ast.NewBoolLit(true) >>
            | false                                             << ast.NewBoolLit(false) >>
            | int_lit                                           << ast.NewIntLit(util.ParseInt($0)) >>
            | float_lit                                         << ast.NewFloatLit(util.ParseFloat($0)) >>
            | koin_lit                                          << ast.NewKoinLit(util.ParseKoin($0)) >>
            | string_lit                                        << ast.NewStringLit(util.ParseString($0)) >>
            | lparen rparen                                     << ast.NewUnitLit() >>
            | lbrack rbrack                                     << ast.NewEmptyList() >>
            | lbrack Array rbrack                               << $1, nil >>
            | lbrace StructLit rbrace                           << $1, nil >>;

Array       : Constant                                          << ast.NewListLit($0) >>
            | Array semicolon Constant                          << ast.AppendList($0, $2) >> ;

StructLit   : lident eq Exp semicolon                           << ast.NewStructLit(util.ParseId($0), $2) >>
            | StructLit lident eq Exp semicolon                 << ast.AppendStructLit($0, util.ParseId($1), $3) >> ;



















