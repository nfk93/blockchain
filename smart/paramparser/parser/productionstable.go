// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/nfk93/blockchain/smart/paramparser/valuebuilder"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Constant	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Constant : key_lit	<< valuebuilder.NewKeyVal(X[0]) >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewKeyVal(X[0])
		},
	},
	ProdTabEntry{
		String: `Constant : add_lit	<< valuebuilder.NewAddressVal(X[0]) >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewAddressVal(X[0])
		},
	},
	ProdTabEntry{
		String: `Constant : "true"	<< valuebuilder.NewBoolVal(true) >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewBoolVal(true)
		},
	},
	ProdTabEntry{
		String: `Constant : "false"	<< valuebuilder.NewBoolVal(false) >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewBoolVal(false)
		},
	},
	ProdTabEntry{
		String: `Constant : nat_lit	<< valuebuilder.NewNatVal(X[0]) >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewNatVal(X[0])
		},
	},
	ProdTabEntry{
		String: `Constant : koin_lit	<< valuebuilder.NewKoinVal(X[0]) >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewKoinVal(X[0])
		},
	},
	ProdTabEntry{
		String: `Constant : int_lit	<< valuebuilder.NewIntVal(X[0]) >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewIntVal(X[0])
		},
	},
	ProdTabEntry{
		String: `Constant : string_lit	<< valuebuilder.NewStringVal(X[0]) >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewStringVal(X[0])
		},
	},
	ProdTabEntry{
		String: `Constant : "()"	<< valuebuilder.NewUnitVal() >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewUnitVal()
		},
	},
	ProdTabEntry{
		String: `Constant : Tuple	<<  >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Constant : List	<<  >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Constant : Struct	<<  >>`,
		Id:         "Constant",
		NTType:     1,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Tuple : "(" Tuple1 ")"	<< X[1], nil >>`,
		Id:         "Tuple",
		NTType:     2,
		Index:      13,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Tuple1 : Tuple1 "," Constant	<< valuebuilder.AddTupleEntry(X[0], X[2]) >>`,
		Id:         "Tuple1",
		NTType:     3,
		Index:      14,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.AddTupleEntry(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Tuple1 : Constant "," Constant	<< valuebuilder.NewTupleVal(X[0], X[2]) >>`,
		Id:         "Tuple1",
		NTType:     3,
		Index:      15,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewTupleVal(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `List : "[" List1 "]"	<< X[1], nil >>`,
		Id:         "List",
		NTType:     4,
		Index:      16,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `List : "[]"	<< valuebuilder.NewEmptyListVal() >>`,
		Id:         "List",
		NTType:     4,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewEmptyListVal()
		},
	},
	ProdTabEntry{
		String: `List1 : Constant	<< valuebuilder.NewListVal(X[0]) >>`,
		Id:         "List1",
		NTType:     5,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewListVal(X[0])
		},
	},
	ProdTabEntry{
		String: `List1 : List1 ";" Constant	<< valuebuilder.ConcatListVal(X[0], X[2]) >>`,
		Id:         "List1",
		NTType:     5,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.ConcatListVal(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Struct : "{" Struct1 "}"	<< X[1], nil >>`,
		Id:         "Struct",
		NTType:     6,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Struct1 : lident "=" Constant ";"	<< valuebuilder.NewStructVal(X[0], X[2]) >>`,
		Id:         "Struct1",
		NTType:     7,
		Index:      21,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.NewStructVal(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Struct1 : Struct1 lident "=" Constant ";"	<< valuebuilder.AddStructField(X[0], X[1], X[3]) >>`,
		Id:         "Struct1",
		NTType:     7,
		Index:      22,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return valuebuilder.AddStructField(X[0], X[1], X[3])
		},
	},
}
