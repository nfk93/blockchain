/* Lexical Part */

comma       : ',' ;
geq         : '>' '=' ;
gt          : '>' ;
leq         : '<' '=' ;
larrow      : '<' '-' ;
neq         : '<' '>' ;
lt          : '<' ;
and         : '&'
            | '&' '&'
            | 'l' 'a' 'n' 'd';
or          : '|' '|'
            | 'l' 'o' 'r'
            | 'o' 'r' ;
not         : 'n' 'o' 't' ;
eq          : '=' ;
plus        : '+' ;
minus       : '-' ;
unminus     : '~' '-' ;
slash       : '/' ;
lbrace      : '{' ;
rbrace      : '}' ;
lbrack      : '[' ;
rbrack      : ']' ;
lparen      : '(' ;
rparen      : ')' ;
concat      : ':' ':' ;
colon       : ':' ;
semicolon   : ';' ;
ast         : '*' ;
key         : 'k' 'e' 'y' ;
operation   : 'o' 'p' 'e' 'r' 'a' 't' 'i' 'o' 'n' ;
option      : 'o' 'p' 't' 'i' 'o' 'n' ;
list        : 'l' 'i' 's' 't' ;
bool        : 'b' 'o' 'o' 'l' ;
unit        : 'u' 'n' 'i' 't' ;
nat         : 'n' 'a' 't' ;
int         : 'i' 'n' 't' ;
address     : 'a' 'd' 'd' 'r' 'e' 's' 's' ;
string      : 's' 't' 'r' 'i' 'n' 'g' ;
false       : 'f' 'a' 'l' 's' 'e' ;
true        : 't' 'r' 'u' 'e' ;
letinit     : 'l' 'e' 't' '%' 'i' 'n' 'i' 't' ;
letentry    : 'l' 'e' 't' '%' 'e' 'n' 't' 'r' 'y' ;
let         : 'l' 'e' 't' ;  // has to go after the other lets
in          : 'i' 'n' ;
if          : 'i' 'f' ;
then        : 't' 'h' 'e' 'n' ;
else        : 'e' 'l' 's' 'e' ;
type        : 't' 'y' 'p' 'e' ;
koin        : 'k' 'o' 'i' 'n' ;

/* TODO: swap to hexchars */
_hexchar    :  '0'-'9' | 'a'-'f' ;
key_lit     : 'k' 'n' '1' _hexchar { _hexchar } ;
address_lit : 'k' 'n' '2' _hexchar { _hexchar } ;

/* id's are all minor case in liquidity, starting with a letter */
_idchars    : 'a'-'z' | 'A'-'Z' | '0'-'9' | '_'  ;
lident      : ( 'a'-'z' | '_' ) { _idchars } ;
uident      : ( 'A'-'Z' ) { _idchars } ;

/* TODO: escape chars */
string_lit  : '"' {.} '"' ;

_digit      : '0'-'9' ;
_amount     : _digit { _digit } ;
koin_lit    : _amount '.' _amount 'k' 'n'
            | _amount 'k' 'n' ;
nat_lit     : _amount 'p' ;
int_lit     : {'-'} _digit { _digit } ;

dot         : '.' ;

/* Comments are treated as whitespace. As are version identifier TODO */
_comment    : '(' '*' {.} '*' ')' ;
_version    : '[' '%' '%' 'v' 'e' 'r' 's' 'i' 'o' 'n' ' ' {.} ']' ;
!whitespace : ' ' | '\t' | '\n' | '\r' | _comment | _version ;




/* Syntax Part */

<< import "github.com/nfk93/blockchain/smart/interpreter/ast"
   import "github.com/nfk93/blockchain/smart/interpreter/util" >>

Toplevel    : Structure                                         << ast.NewRoot($0) >>
            | Structure Toplevel                                << ast.AppendRoots($0, $1) >> ;


Structure   : ModStruct                                         << >>
            | letinit lident eq Exp                             << ast.NewStorageInitExp(util.ParseId($1), $3) >>
            | letentry lident Pattern Pattern eq Exp            << ast.NewEntryExpression(util.ParseId($1), $2, $3, $5) // >> ;

ModStruct   : type lident eq Type                               << ast.NewTypeDecl(util.ParseId($1), $3) // >>
            | type lident eq lbrace Struct rbrace               << ast.NewTypeDecl(util.ParseId($1), $4) // >> ;

Struct      : lident colon Type semicolon Struct                << ast.AddFieldToStruct(util.ParseId($0), $2, $4), nil // >>
            | lident colon Type semicolon                       << ast.NewStructType(util.ParseId($0), $2), nil // >> ;

Exp         : Exp1                                              << $0, nil >>
            | Exp1 semicolon Exp                                << ast.NewExpSeq($0, $2) // seqexp >> ;
Exp1        : CallExp                                           << $0, nil >>
            | VarExp                                            << $0, nil >>
            | AnnoExp                                           << $0, nil >>
            | ParenthExp                                        << $0, nil >>
            | UpdStruct                                         << $0, nil >>
            | LookupExp                                         << $0, nil >>
            | ModLookup                                         << $0, nil >>
            | if Exp1 then Exp1 else Exp1                       << ast.NewIfThenElseExp($1, $3, $5) // ifthenelse exp >>
            | if Exp1 then Exp1                                 << ast.NewIfThenExp($1, $3) // ifthen exp >>
            | Exp1 concat Exp1                                  << ast.NewListConcat($0, $2) // >>
            | let Pattern eq Exp in Exp1                        << ast.NewLetExp($1, $3, $5) // letexp >>
            | BinOpExp                                          << $0, nil >>
            | UnopExp                                           << $0, nil >>
            | Constant                                          << $0, nil >> ;

ModLookup   : uident dot lident                                 << ast.NewModuleLookupExp(util.ParseId($0), util.ParseId($2)) // external lookup exp >> ;

AnnoExp     : lparen Exp1 colon Type rparen                     << ast.NewAnnoExp($1, $3) // annotatedExp >> ;

UpdStruct   : Lookup lident larrow Exp                          << ast.NewUpdateStructExp($0, util.ParseId($1), $3) // lookupexp >> ;

VarExp      : lident                                            << ast.NewVarExp(util.ParseId($0)) // idexp >> ;

CallExp     : CallExp1                                          << ast.NewCallExp($0) >> ;
CallExp1    : CallExp1 CallExp2                                 << ast.ConcatExpList($0, $1) >>
            | CallHead CallExp2                                 << ast.NewExpList($0, $1) >> ;
CallHead    : ModLookup                                         << $0, nil >> ;
CallExp2    : VarExp                                            << $0, nil >>
            | AnnoExp                                           << $0, nil >>
            | ParenthExp                                        << $0, nil >>
            | LookupExp                                         << $0, nil >>
            | Constant                                          << $0, nil >> ;

ParenthExp  : lparen Exp rparen                                 << $1, nil // parenthesis >> ;

BinOpExp    : BinOpExp or BinOpExp1                             << ast.NewBinOpExp($0, ast.OR, $2) // BinopExp >>
            | BinOpExp1                                         << $0, nil >> ;
BinOpExp1   : BinOpExp1 and BinOpExp2                           << ast.NewBinOpExp($0, ast.AND, $2) // BinopExp >>
            | BinOpExp2                                         << $0, nil >> ;
BinOpExp2   : BinOpExp2 Cmp BinOpExp3                           << ast.NewBinOpExp($0, $1, $2) // BinopExp >>
            | BinOpExp3                                         << $0, nil >> ;
BinOpExp3   : BinOpExp3 plus BinOpExp4                          << ast.NewBinOpExp($0, ast.PLUS, $2) // BinopExp >>
            | BinOpExp3 minus BinOpExp4                         << ast.NewBinOpExp($0, ast.MINUS, $2) // BinopExp >>
            | BinOpExp4                                         << $0, nil >> ;
BinOpExp4   : BinOpExp4 ast BinOpExp5                           << ast.NewBinOpExp($0, ast.TIMES, $2) // BinopExp >>
            | BinOpExp4 slash BinOpExp5                         << ast.NewBinOpExp($0, ast.DIVIDE, $2) // BinopExp >>
            | BinOpExp5                                         << $0, nil >> ;
BinOpExp5   : VarExp                                            << $0, nil >>
            | AnnoExp                                           << $0, nil >>
            | Constant                                          << $0, nil >>
            | LookupExp                                         << $0, nil >>
            | ParenthExp                                        << $0, nil >>
            | UnopExp                                           << $0, nil >>
            | CallExp                                           << $0, nil >> ;

Cmp         : eq eq                                             << ast.EQ, nil >>
            | neq                                               << ast.NEQ, nil >>
            | geq                                               << ast.GEQ, nil >>
            | leq                                               << ast.LEQ, nil >>
            | lt                                                << ast.LT, nil >>
            | gt                                                << ast.GT, nil >> ;

UnopExp     : Unop Exp1                                         << ast.NewUnOpExp($0, $1) >> ;
Unop        : unminus                                           << ast.UNARYMINUS, nil >>
            | not                                               << ast.NOT, nil >> ;


LookupExp   : Lookup lident                                     << ast.NewLookupExp($0, util.ParseId($1)) // lookupexp >> ;
Lookup      : Lookup lident dot                                 << ast.AddPathElement($0, util.ParseId($1)), nil // intermediate for lookup calls  >>
            | lident dot                                        << ast.LookupPathRoot(util.ParseId($0)), nil // see above >> ;

Pattern     : lparen rparen                                     << ast.NewEmptyPattern() // >>
            | lparen Paramlist rparen                           << ast.NewPattern($1) >>
            | Param                                             << ast.NewPattern($0) >> ;
Param       : lident                                            << ast.NewParam(util.ParseId($0)) // param >>
            | lparen lident colon Type rparen                   << ast.NewAnnoParam(util.ParseId($1), $3) // typeanno param >> ;
Paramlist   : Param comma Paramlist                             << ast.AppendParams($0, $2)>>
            | Param                                             << ast.NewParamList($0)>> ;

Type        : Tupletype                                         << ast.NewTupleType($0), nil >>
            | Type1                                             << $0, nil >> ;
Type1       : lparen Type rparen                                << $1, nil >>
            | bool                                              << ast.NewBoolType(), nil >>
            | int                                               << ast.NewIntType(), nil >>
            | nat                                               << ast.NewNatType(), nil >>
            | unit                                              << ast.NewUnitType(), nil >>
            | koin                                              << ast.NewKoinType(), nil >>
            | string                                            << ast.NewStringType(), nil >>
            | key                                               << ast.NewKeyType(), nil >>
            | operation                                         << ast.NewOperationType(), nil >>
            | address                                           << ast.NewAddressType(), nil >>
            | Type1 option                                      << ast.NewOptionType($0), nil >>
            | Type1 list                                        << ast.NewListType($0), nil >>
            | lident                                            << ast.NewDeclaredType(util.ParseId($0)), nil >> ;
Tupletype   : Type1 ast Tupletype                               << ast.PrependTypeList($0, $2), nil >>
            | Type1 ast Type1                                   << ast.NewTypeList($0, $2), nil >> ;

Constant    : key_lit                                           << ast.NewKeyLit(util.ParseKey($0)) >>
            | address_lit                                       << ast.NewAddressLit(util.ParseAddress($0)) >>
            | true                                              << ast.NewBoolLit(true) >>
            | false                                             << ast.NewBoolLit(false) >>
            | int_lit                                           << ast.NewIntLit(util.ParseInt($0)) >>
            | nat_lit                                           << ast.NewNatLit(util.ParseNat($0)) >>
            | koin_lit                                          << ast.NewKoinLit(util.ParseKoin($0)) >>
            | string_lit                                        << ast.NewStringLit(util.ParseString($0)) >>
            | lparen Tuple rparen                               << $1, nil // tupleexp >>
            | lparen rparen                                     << ast.NewUnitLit() >>
            | lbrack rbrack                                     << ast.NewEmptyList() >>
            | lbrack Array rbrack                               << $1, nil >>
            | lbrace StructLit rbrace                           << $1, nil >> ;
Array       : Exp1                                              << ast.NewListLit($0) >>
            | Array semicolon Exp1                              << ast.AppendList($0, $2) >> ;
StructLit   : lident eq Exp1 semicolon                          << ast.NewStructLit(util.ParseId($0), $2) >>
            | StructLit lident eq Exp1 semicolon                << ast.AppendStructLit($0, util.ParseId($1), $3) >> ;
Tuple       : Exp1 comma Exp1                                   << ast.NewTupleExp($0, $2) // tuple >>
            | Exp1 comma Tuple                                  << ast.AddTupleEntry($0, $2) // tuple of tuple >> ;
