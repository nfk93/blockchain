// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/nfk93/blockchain/smart/interpreter/ast"
import "github.com/nfk93/blockchain/smart/interpreter/util"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Toplevel	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Toplevel : Structure	<< ast.NewRoot(X[0]) >>`,
		Id:         "Toplevel",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRoot(X[0])
		},
	},
	ProdTabEntry{
		String: `Toplevel : Structure Toplevel	<< ast.AppendRoots(X[0], X[1]) >>`,
		Id:         "Toplevel",
		NTType:     1,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendRoots(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Structure : ModStruct	<<  >>`,
		Id:         "Structure",
		NTType:     2,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Structure : letinit lident eq Exp	<< ast.NewStorageInitExp(util.ParseId(X[1]), X[3]) >>`,
		Id:         "Structure",
		NTType:     2,
		Index:      4,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStorageInitExp(util.ParseId(X[1]), X[3])
		},
	},
	ProdTabEntry{
		String: `Structure : letentry lident Pattern Pattern eq Exp	<< ast.NewEntryExpression(util.ParseId(X[1]), X[2], X[3], X[5]) // >>`,
		Id:         "Structure",
		NTType:     2,
		Index:      5,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEntryExpression(util.ParseId(X[1]), X[2], X[3], X[5]) //
		},
	},
	ProdTabEntry{
		String: `ModStruct : type lident eq Type	<< ast.NewTypeDecl(util.ParseId(X[1]), X[3]) // >>`,
		Id:         "ModStruct",
		NTType:     3,
		Index:      6,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewTypeDecl(util.ParseId(X[1]), X[3]) //
		},
	},
	ProdTabEntry{
		String: `ModStruct : type lident eq lbrace Struct rbrace	<< ast.NewTypeDecl(util.ParseId(X[1]), X[4]) // >>`,
		Id:         "ModStruct",
		NTType:     3,
		Index:      7,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewTypeDecl(util.ParseId(X[1]), X[4]) //
		},
	},
	ProdTabEntry{
		String: `Struct : lident colon Type semicolon Struct	<< ast.AddFieldToStruct(util.ParseId(X[0]), X[2], X[4]), nil // >>`,
		Id:         "Struct",
		NTType:     4,
		Index:      8,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddFieldToStruct(util.ParseId(X[0]), X[2], X[4]), nil //
		},
	},
	ProdTabEntry{
		String: `Struct : lident colon Type semicolon	<< ast.NewStructType(util.ParseId(X[0]), X[2]), nil // >>`,
		Id:         "Struct",
		NTType:     4,
		Index:      9,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructType(util.ParseId(X[0]), X[2]), nil //
		},
	},
	ProdTabEntry{
		String: `Exp : Exp1	<< X[0], nil >>`,
		Id:         "Exp",
		NTType:     5,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp : Exp1 semicolon Exp	<< ast.NewExpSeq(X[0], X[2]) // seqexp >>`,
		Id:         "Exp",
		NTType:     5,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewExpSeq(X[0], X[2]) // seqexp
		},
	},
	ProdTabEntry{
		String: `Exp1 : CallExp	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : VarExp	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : AnnoExp	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : ParenthExp	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : UpdStruct	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : LookupExp	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : ModLookup	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : if Exp1 then Exp1 else Exp1	<< ast.NewIfThenElseExp(X[1], X[3], X[5]) // ifthenelse exp >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      19,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIfThenElseExp(X[1], X[3], X[5]) // ifthenelse exp
		},
	},
	ProdTabEntry{
		String: `Exp1 : if Exp1 then Exp1	<< ast.NewIfThenExp(X[1], X[3]) // ifthen exp >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      20,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIfThenExp(X[1], X[3]) // ifthen exp
		},
	},
	ProdTabEntry{
		String: `Exp1 : Exp1 concat Exp1	<< ast.NewListConcat(X[0], X[2]) // >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      21,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewListConcat(X[0], X[2]) //
		},
	},
	ProdTabEntry{
		String: `Exp1 : let Pattern eq Exp in Exp1	<< ast.NewLetExp(X[1], X[3], X[5]) // letexp >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      22,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLetExp(X[1], X[3], X[5]) // letexp
		},
	},
	ProdTabEntry{
		String: `Exp1 : BinOpExp	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : UnopExp	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp1 : Constant	<< X[0], nil >>`,
		Id:         "Exp1",
		NTType:     6,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ModLookup : uident dot lident	<< ast.NewModuleLookupExp(util.ParseId(X[0]), util.ParseId(X[2])) // external lookup exp >>`,
		Id:         "ModLookup",
		NTType:     7,
		Index:      26,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewModuleLookupExp(util.ParseId(X[0]), util.ParseId(X[2])) // external lookup exp
		},
	},
	ProdTabEntry{
		String: `AnnoExp : lparen Exp1 colon Type rparen	<< ast.NewAnnoExp(X[1], X[3]) // annotatedExp >>`,
		Id:         "AnnoExp",
		NTType:     8,
		Index:      27,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAnnoExp(X[1], X[3]) // annotatedExp
		},
	},
	ProdTabEntry{
		String: `UpdStruct : Lookup lident larrow Exp	<< ast.NewUpdateStructExp(X[0], util.ParseId(X[1]), X[3]) // lookupexp >>`,
		Id:         "UpdStruct",
		NTType:     9,
		Index:      28,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewUpdateStructExp(X[0], util.ParseId(X[1]), X[3]) // lookupexp
		},
	},
	ProdTabEntry{
		String: `VarExp : lident	<< ast.NewVarExp(util.ParseId(X[0])) // idexp >>`,
		Id:         "VarExp",
		NTType:     10,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewVarExp(util.ParseId(X[0])) // idexp
		},
	},
	ProdTabEntry{
		String: `CallExp : CallExp1	<< ast.NewCallExp(X[0]) >>`,
		Id:         "CallExp",
		NTType:     11,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCallExp(X[0])
		},
	},
	ProdTabEntry{
		String: `CallExp1 : CallExp1 CallExp2	<< ast.ConcatExpList(X[0], X[1]) >>`,
		Id:         "CallExp1",
		NTType:     12,
		Index:      31,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ConcatExpList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `CallExp1 : CallHead CallExp2	<< ast.NewExpList(X[0], X[1]) >>`,
		Id:         "CallExp1",
		NTType:     12,
		Index:      32,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewExpList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `CallHead : ModLookup	<< X[0], nil >>`,
		Id:         "CallHead",
		NTType:     13,
		Index:      33,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CallExp2 : VarExp	<< X[0], nil >>`,
		Id:         "CallExp2",
		NTType:     14,
		Index:      34,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CallExp2 : AnnoExp	<< X[0], nil >>`,
		Id:         "CallExp2",
		NTType:     14,
		Index:      35,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CallExp2 : ParenthExp	<< X[0], nil >>`,
		Id:         "CallExp2",
		NTType:     14,
		Index:      36,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CallExp2 : LookupExp	<< X[0], nil >>`,
		Id:         "CallExp2",
		NTType:     14,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CallExp2 : Constant	<< X[0], nil >>`,
		Id:         "CallExp2",
		NTType:     14,
		Index:      38,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ParenthExp : lparen Exp rparen	<< X[1], nil // parenthesis >>`,
		Id:         "ParenthExp",
		NTType:     15,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil // parenthesis
		},
	},
	ProdTabEntry{
		String: `BinOpExp : BinOpExp or BinOpExp1	<< ast.NewBinOpExp(X[0], ast.OR, X[2]) // BinopExp >>`,
		Id:         "BinOpExp",
		NTType:     16,
		Index:      40,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBinOpExp(X[0], ast.OR, X[2]) // BinopExp
		},
	},
	ProdTabEntry{
		String: `BinOpExp : BinOpExp1	<< X[0], nil >>`,
		Id:         "BinOpExp",
		NTType:     16,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp1 : BinOpExp1 and BinOpExp2	<< ast.NewBinOpExp(X[0], ast.AND, X[2]) // BinopExp >>`,
		Id:         "BinOpExp1",
		NTType:     17,
		Index:      42,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBinOpExp(X[0], ast.AND, X[2]) // BinopExp
		},
	},
	ProdTabEntry{
		String: `BinOpExp1 : BinOpExp2	<< X[0], nil >>`,
		Id:         "BinOpExp1",
		NTType:     17,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp2 : BinOpExp2 Cmp BinOpExp3	<< ast.NewBinOpExp(X[0], X[1], X[2]) // BinopExp >>`,
		Id:         "BinOpExp2",
		NTType:     18,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBinOpExp(X[0], X[1], X[2]) // BinopExp
		},
	},
	ProdTabEntry{
		String: `BinOpExp2 : BinOpExp3	<< X[0], nil >>`,
		Id:         "BinOpExp2",
		NTType:     18,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp3 : BinOpExp3 plus BinOpExp4	<< ast.NewBinOpExp(X[0], ast.PLUS, X[2]) // BinopExp >>`,
		Id:         "BinOpExp3",
		NTType:     19,
		Index:      46,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBinOpExp(X[0], ast.PLUS, X[2]) // BinopExp
		},
	},
	ProdTabEntry{
		String: `BinOpExp3 : BinOpExp3 minus BinOpExp4	<< ast.NewBinOpExp(X[0], ast.MINUS, X[2]) // BinopExp >>`,
		Id:         "BinOpExp3",
		NTType:     19,
		Index:      47,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBinOpExp(X[0], ast.MINUS, X[2]) // BinopExp
		},
	},
	ProdTabEntry{
		String: `BinOpExp3 : BinOpExp4	<< X[0], nil >>`,
		Id:         "BinOpExp3",
		NTType:     19,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp4 : BinOpExp4 ast BinOpExp5	<< ast.NewBinOpExp(X[0], ast.TIMES, X[2]) // BinopExp >>`,
		Id:         "BinOpExp4",
		NTType:     20,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBinOpExp(X[0], ast.TIMES, X[2]) // BinopExp
		},
	},
	ProdTabEntry{
		String: `BinOpExp4 : BinOpExp4 slash BinOpExp5	<< ast.NewBinOpExp(X[0], ast.DIVIDE, X[2]) // BinopExp >>`,
		Id:         "BinOpExp4",
		NTType:     20,
		Index:      50,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBinOpExp(X[0], ast.DIVIDE, X[2]) // BinopExp
		},
	},
	ProdTabEntry{
		String: `BinOpExp4 : BinOpExp5	<< X[0], nil >>`,
		Id:         "BinOpExp4",
		NTType:     20,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp5 : VarExp	<< X[0], nil >>`,
		Id:         "BinOpExp5",
		NTType:     21,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp5 : AnnoExp	<< X[0], nil >>`,
		Id:         "BinOpExp5",
		NTType:     21,
		Index:      53,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp5 : Constant	<< X[0], nil >>`,
		Id:         "BinOpExp5",
		NTType:     21,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp5 : LookupExp	<< X[0], nil >>`,
		Id:         "BinOpExp5",
		NTType:     21,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp5 : ParenthExp	<< X[0], nil >>`,
		Id:         "BinOpExp5",
		NTType:     21,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp5 : UnopExp	<< X[0], nil >>`,
		Id:         "BinOpExp5",
		NTType:     21,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinOpExp5 : CallExp	<< X[0], nil >>`,
		Id:         "BinOpExp5",
		NTType:     21,
		Index:      58,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Cmp : eq eq	<< ast.EQ, nil >>`,
		Id:         "Cmp",
		NTType:     22,
		Index:      59,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.EQ, nil
		},
	},
	ProdTabEntry{
		String: `Cmp : neq	<< ast.NEQ, nil >>`,
		Id:         "Cmp",
		NTType:     22,
		Index:      60,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NEQ, nil
		},
	},
	ProdTabEntry{
		String: `Cmp : geq	<< ast.GEQ, nil >>`,
		Id:         "Cmp",
		NTType:     22,
		Index:      61,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.GEQ, nil
		},
	},
	ProdTabEntry{
		String: `Cmp : leq	<< ast.LEQ, nil >>`,
		Id:         "Cmp",
		NTType:     22,
		Index:      62,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.LEQ, nil
		},
	},
	ProdTabEntry{
		String: `Cmp : lt	<< ast.LT, nil >>`,
		Id:         "Cmp",
		NTType:     22,
		Index:      63,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.LT, nil
		},
	},
	ProdTabEntry{
		String: `Cmp : gt	<< ast.GT, nil >>`,
		Id:         "Cmp",
		NTType:     22,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.GT, nil
		},
	},
	ProdTabEntry{
		String: `UnopExp : Unop Exp1	<< ast.NewUnOpExp(X[0], X[1]) >>`,
		Id:         "UnopExp",
		NTType:     23,
		Index:      65,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewUnOpExp(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Unop : unminus	<< ast.UNARYMINUS, nil >>`,
		Id:         "Unop",
		NTType:     24,
		Index:      66,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.UNARYMINUS, nil
		},
	},
	ProdTabEntry{
		String: `Unop : not	<< ast.NOT, nil >>`,
		Id:         "Unop",
		NTType:     24,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NOT, nil
		},
	},
	ProdTabEntry{
		String: `LookupExp : Lookup lident	<< ast.NewLookupExp(X[0], util.ParseId(X[1])) // lookupexp >>`,
		Id:         "LookupExp",
		NTType:     25,
		Index:      68,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLookupExp(X[0], util.ParseId(X[1])) // lookupexp
		},
	},
	ProdTabEntry{
		String: `Lookup : Lookup lident dot	<< ast.AddPathElement(X[0], util.ParseId(X[1])), nil // intermediate for lookup calls >>`,
		Id:         "Lookup",
		NTType:     26,
		Index:      69,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddPathElement(X[0], util.ParseId(X[1])), nil // intermediate for lookup calls
		},
	},
	ProdTabEntry{
		String: `Lookup : lident dot	<< ast.LookupPathRoot(util.ParseId(X[0])), nil // see above >>`,
		Id:         "Lookup",
		NTType:     26,
		Index:      70,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.LookupPathRoot(util.ParseId(X[0])), nil // see above
		},
	},
	ProdTabEntry{
		String: `Pattern : lparen rparen	<< ast.NewEmptyPattern() // >>`,
		Id:         "Pattern",
		NTType:     27,
		Index:      71,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEmptyPattern() //
		},
	},
	ProdTabEntry{
		String: `Pattern : lparen Paramlist rparen	<< ast.NewPattern(X[1]) >>`,
		Id:         "Pattern",
		NTType:     27,
		Index:      72,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPattern(X[1])
		},
	},
	ProdTabEntry{
		String: `Pattern : Param	<< ast.NewPattern(X[0]) >>`,
		Id:         "Pattern",
		NTType:     27,
		Index:      73,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPattern(X[0])
		},
	},
	ProdTabEntry{
		String: `Param : lident	<< ast.NewParam(util.ParseId(X[0])) // param >>`,
		Id:         "Param",
		NTType:     28,
		Index:      74,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewParam(util.ParseId(X[0])) // param
		},
	},
	ProdTabEntry{
		String: `Param : lparen lident colon Type rparen	<< ast.NewAnnoParam(util.ParseId(X[1]), X[3]) // typeanno param >>`,
		Id:         "Param",
		NTType:     28,
		Index:      75,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAnnoParam(util.ParseId(X[1]), X[3]) // typeanno param
		},
	},
	ProdTabEntry{
		String: `Paramlist : Param comma Paramlist	<< ast.AppendParams(X[0], X[2]) >>`,
		Id:         "Paramlist",
		NTType:     29,
		Index:      76,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendParams(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Paramlist : Param	<< ast.NewParamList(X[0]) >>`,
		Id:         "Paramlist",
		NTType:     29,
		Index:      77,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewParamList(X[0])
		},
	},
	ProdTabEntry{
		String: `Type : Tupletype	<< ast.NewTupleType(X[0]), nil >>`,
		Id:         "Type",
		NTType:     30,
		Index:      78,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewTupleType(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Type : Type1	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     30,
		Index:      79,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type1 : lparen Type rparen	<< X[1], nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      80,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Type1 : bool	<< ast.NewBoolType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      81,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBoolType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : int	<< ast.NewIntType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      82,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIntType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : nat	<< ast.NewNatType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      83,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNatType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : unit	<< ast.NewUnitType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      84,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewUnitType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : koin	<< ast.NewKoinType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      85,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewKoinType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : string	<< ast.NewStringType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      86,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStringType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : key	<< ast.NewKeyType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      87,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewKeyType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : operation	<< ast.NewOperationType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      88,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewOperationType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : address	<< ast.NewAddressType(), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      89,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAddressType(), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : Type1 option	<< ast.NewOptionType(X[0]), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      90,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewOptionType(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : Type1 list	<< ast.NewListType(X[0]), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      91,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewListType(X[0]), nil
		},
	},
	ProdTabEntry{
		String: `Type1 : lident	<< ast.NewDeclaredType(util.ParseId(X[0])), nil >>`,
		Id:         "Type1",
		NTType:     31,
		Index:      92,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewDeclaredType(util.ParseId(X[0])), nil
		},
	},
	ProdTabEntry{
		String: `Tupletype : Type1 ast Tupletype	<< ast.PrependTypeList(X[0], X[2]), nil >>`,
		Id:         "Tupletype",
		NTType:     32,
		Index:      93,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.PrependTypeList(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `Tupletype : Type1 ast Type1	<< ast.NewTypeList(X[0], X[2]), nil >>`,
		Id:         "Tupletype",
		NTType:     32,
		Index:      94,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewTypeList(X[0], X[2]), nil
		},
	},
	ProdTabEntry{
		String: `Constant : key_lit	<< ast.NewKeyLit(util.ParseKey(X[0])) >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      95,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewKeyLit(util.ParseKey(X[0]))
		},
	},
	ProdTabEntry{
		String: `Constant : address_lit	<< ast.NewAddressLit(util.ParseAddress(X[0])) >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      96,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAddressLit(util.ParseAddress(X[0]))
		},
	},
	ProdTabEntry{
		String: `Constant : true	<< ast.NewBoolLit(true) >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      97,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBoolLit(true)
		},
	},
	ProdTabEntry{
		String: `Constant : false	<< ast.NewBoolLit(false) >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      98,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBoolLit(false)
		},
	},
	ProdTabEntry{
		String: `Constant : int_lit	<< ast.NewIntLit(util.ParseInt(X[0])) >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      99,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIntLit(util.ParseInt(X[0]))
		},
	},
	ProdTabEntry{
		String: `Constant : nat_lit	<< ast.NewNatLit(util.ParseNat(X[0])) >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      100,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNatLit(util.ParseNat(X[0]))
		},
	},
	ProdTabEntry{
		String: `Constant : koin_lit	<< ast.NewKoinLit(util.ParseKoin(X[0])) >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      101,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewKoinLit(util.ParseKoin(X[0]))
		},
	},
	ProdTabEntry{
		String: `Constant : string_lit	<< ast.NewStringLit(util.ParseString(X[0])) >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      102,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStringLit(util.ParseString(X[0]))
		},
	},
	ProdTabEntry{
		String: `Constant : lparen Tuple rparen	<< X[1], nil // tupleexp >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      103,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil // tupleexp
		},
	},
	ProdTabEntry{
		String: `Constant : lparen rparen	<< ast.NewUnitLit() >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      104,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewUnitLit()
		},
	},
	ProdTabEntry{
		String: `Constant : lbrack rbrack	<< ast.NewEmptyList() >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      105,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEmptyList()
		},
	},
	ProdTabEntry{
		String: `Constant : lbrack Array rbrack	<< X[1], nil >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      106,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Constant : lbrace StructLit rbrace	<< X[1], nil >>`,
		Id:         "Constant",
		NTType:     33,
		Index:      107,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Array : Exp1	<< ast.NewListLit(X[0]) >>`,
		Id:         "Array",
		NTType:     34,
		Index:      108,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewListLit(X[0])
		},
	},
	ProdTabEntry{
		String: `Array : Array semicolon Exp1	<< ast.AppendList(X[0], X[2]) >>`,
		Id:         "Array",
		NTType:     34,
		Index:      109,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendList(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `StructLit : lident eq Exp1 semicolon	<< ast.NewStructLit(util.ParseId(X[0]), X[2]) >>`,
		Id:         "StructLit",
		NTType:     35,
		Index:      110,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructLit(util.ParseId(X[0]), X[2])
		},
	},
	ProdTabEntry{
		String: `StructLit : StructLit lident eq Exp1 semicolon	<< ast.AppendStructLit(X[0], util.ParseId(X[1]), X[3]) >>`,
		Id:         "StructLit",
		NTType:     35,
		Index:      111,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendStructLit(X[0], util.ParseId(X[1]), X[3])
		},
	},
	ProdTabEntry{
		String: `Tuple : Exp1 comma Exp1	<< ast.NewTupleExp(X[0], X[2]) // tuple >>`,
		Id:         "Tuple",
		NTType:     36,
		Index:      112,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewTupleExp(X[0], X[2]) // tuple
		},
	},
	ProdTabEntry{
		String: `Tuple : Exp1 comma Tuple	<< ast.AddTupleEntry(X[0], X[2]) // tuple of tuple >>`,
		Id:         "Tuple",
		NTType:     36,
		Index:      113,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddTupleEntry(X[0], X[2]) // tuple of tuple
		},
	},
}
